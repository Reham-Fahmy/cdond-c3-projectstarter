version: 2.1
commands:
 install_awscli:
   description: Install AWS CLI v2
   steps:
     - run:
          name: Install AWS CLI v2
          command: |
               curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
               unzip awscliv2.zip
               sudo ./aws/install
 install_ansible:
   description: Install Ansible
   steps:
     - run:
         name: Install Ansible
         command: |
           python3 -m pip install --user ansible

 destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
         type : string
         default:  ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
         - run:
             name: Destroy environments
             when: on_fail
             command: |
                aws s3 rm s3://udapeople-${Workflow_ID } --recursive
                aws cloudformation delete-stack --stack-name udapeople-frontend-${Workflow_ID }
                aws cloudformation delete-stack --stack-name udapeople-backend-${Workflow_ID }

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps-{{ checksum "frontend/package-lock.json" }}
    

  build-backend:
    docker:
    - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - backend-deps-{{ checksum "backend/package-lock.json" }}
    - run:
        name: Install dependencies
        command: |
          cd backend
          npm install
    - run:
        name: Build backend
        command: |
          cd backend
          npm run build
    - save_cache:
        paths: [backend/node_modules]
        key: backend-deps-{{ checksum "backend/package-lock.json" }}
  test-frontend:
    docker:
    - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - frontend-deps-{{ checksum "frontend/package-lock.json" }}
    - run:
        name: Install dependencies
        command: |
          cd frontend
          npm install
    - run:
        name: Run frontend unit tests
        command: |
          cd frontend
          npm run test
  test-backend:
    docker:
    - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - backend-deps-{{ checksum "backend/package-lock.json" }}
    - run:
        name: Install dependencies
        command: |
          cd backend
          npm install
    - run:
        name: Run backend unit tests
        command: |
          cd backend
          npm run test
  scan-frontend:
    docker:
    - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - frontend-deps-{{ checksum "frontend/package-lock.json" }}
    - run:
        name: Install dependencies
        command: |
          cd frontend
          npm install
    - run:
        name: Scan frontend packages
        command: |
          cd frontend
          npm audit fix --force --audit-level=critical
          npm audit --audit-level=critical
  scan-backend:
    docker:
    - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - backend-deps-{{ checksum "backend/package-lock.json" }}
    - run:
        name: Install dependencies
        command: |
          cd backend
          npm install
    - run:
        name: Scan backend packages
        command: |
          cd backend
          npm audit fix 
  deploy-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
           name: Install tar utility
           command: |
             yum install -y tar gzip
        - run:
            name: Ensure frontend infrastructure exist
            command: |
                 aws cloudformation deploy \
                 --template-file .circleci/files/frontend.yml \
                 --tags project=udapeople \
                 --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                 --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Ensure backend infrastructure exist
            command: |
                 aws cloudformation deploy \
                 --template-file .circleci/files/backend.yml \
                 --tags project=udapeople \
                 --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                 --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Add back-end ip to ansible inventory
            command: |
                 BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                 --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                 --query 'Reservations[*].Instances[*].PublicIpAddress' \
                 --output text)
                 echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
                 cat .circleci/ansible/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 

  configure-infrastructure:
    docker:
    - image: cimg/python:3.10
    steps:
    - checkout
    - install_ansible
    - install_awscli
    - add_ssh_keys:
       fingerprints: ["de:7d:9e:ac:65:62:6f:1c:44:74:ea:84:98:76:ae:8e"]
    - attach_workspace:
        at: ~/
    - run:
       name: Run Configure Server Ansible play
       command: |
         cd .circleci/ansible
         cat inventory.txt

         ansible-playbook -i inventory.txt configure-server.yml
    - destroy-environment
  

      
         
workflows:
  my_workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          
