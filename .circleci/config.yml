
version: 2.1
commands:
  destroy-environment:
    description: Destroy-back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
          
               aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
               aws cloudformation delete-stack --stack-name udapeople-<< parameters.Workflow_ID >>-fe        
               aws cloudformation delete-stack --stack-name udapeople-<< parameters.Workflow_ID >>-be
      

  install_awscli:
   description: Install AWS Cli v2
   steps:
     - run:
          name: Install AWS CLI v2
          command: |
               curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
               unzip awscliv2.zip
               sudo ./aws/install
  install_ansible:
   description: Install Ansible
   steps:
     - run:
         name: Install Ansible
         command: |
           python3 -m pip install --user ansible

  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0
  revert-migrations:
    description: Revert the last migration, if any were executed during the current workflow
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps-{{ checksum "frontend/package-lock.json" }}
    
    

  build-backend:
    docker:
    - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - backend-deps-{{ checksum "backend/package-lock.json" }}
    - run:
        name: Install dependenciess
        command: |
          cd backend
          npm install
    - run:
        name: Build backend
        command: |
          cd backend
          npm run build
    - save_cache:
        paths: [backend/node_modules]
        key: backend-deps-{{ checksum "backend/package-lock.json" }}
  test-frontend:
    docker:
    - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - frontend-deps-{{ checksum "frontend/package-lock.json" }}
    - run:
        name: Install dependencies
        command: |
          cd frontend
          npm install
    - run:
        name: Run frontend unit tests
        command: |
          cd frontend
          npm run test
  test-backend:
    docker:
    - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - backend-deps-{{ checksum "backend/package-lock.json" }}
    - run:
        name: Install dependencies
        command: |
          cd backend
          npm install
    - run:
        name: Run backend unit tests
        command: |
          cd backend
          npm run test
  scan-frontend:
    docker:
    - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - frontend-deps-{{ checksum "frontend/package-lock.json" }}
    - run:
        name: Install dependencies
        command: |
          cd frontend
          npm install
    - run:
        name: Scan frontend packages
        command: |
          cd frontend
          npm audit fix
          npm audit fix --force --audit-level=critical
          npm audit --audit-level=critical
  scan-backend:
    docker:
    - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - backend-deps-{{ checksum "backend/package-lock.json" }}
    - run:
        name: Install dependencies
        command: |
          cd backend
          npm install
    - run:
        name: Scan backend packages
        command: |
          cd backend
          npm audit fix 
  deploy-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
           name: Install tar utility
           command: |
             yum install -y tar gzip
        - run:
            name: Ensure frontend infrastructure exist
            command: |
                 aws cloudformation deploy \
                 --template-file .circleci/files/frontend.yml \
                 --tags project=udapeople \
                 --stack-name "udapeople-${CIRCLE_WORKFLOW_ID:0:7}-fe" \
                 --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Ensure backend infrastructure exist
            command: |
                 aws cloudformation deploy \
                 --template-file .circleci/files/backend.yml \
                 --tags project=udapeople \
                 --stack-name "udapeople-${CIRCLE_WORKFLOW_ID:0:7}-be" \
                 --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Add back-end ip to ansible inventory
            command: |
                 BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                 --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                 --query 'Reservations[*].Instances[*].PublicIpAddress' \
                 --output text)
                 echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
                 echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030"  >>  frontend/.env
                 cat .circleci/ansible/inventory.txt
                 cat frontend/.env
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 

  configure-infrastructure:
    docker:
    - image: cimg/python:3.10
    steps:
    - checkout
    - install_ansible
    - install_awscli
    - add_ssh_keys:
       fingerprints: ["c4:14:42:18:d3:6b:aa:94:6a:07:a3:39:0e:c4:0f:46"]
    - attach_workspace:
        at: ~/
    - run:
       name: Run Configure Server Ansible play
       command: |
         cd .circleci/ansible
         cat inventory.txt
         ansible-playbook -i inventory.txt configure-server.yml
    - destroy-environment
  
  run-migrations:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
           keys: [backend-deps]
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              
              npm run migrations >> migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
               then
                  curl https://kvdb.io/YLrQoKsZ11xXxEAm8pAs49/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
               else
                  echo "No migrations are pending" 
                  
             fi
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - attach_workspace:
                  at: ~/
      - restore_cache:
           keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
             cd frontend
             npm install
      
      - run:
         name: Run Configure Server Ansible play
         command: |
          
         
            BACKEND_PUBLIC_IP=$(tail -n 1 ".circleci/ansible/inventory.txt") 
            echo "${BACKEND_PUBLIC_IP}"
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030"   >>   frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [backend-deps]
      - add_ssh_keys:
           fingerprints: ["de:7d:9e:ac:65:62:6f:1c:44:74:ea:84:98:76:ae:8e"]
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
           cd backend
           npm run build
           tar -czf artifact.tar.gz dist/* package*
           cd ..
           cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
         name: Deploy backend
         command: |
               
               export TYPEORM_MIGRATIONS_DIR=./migrations
               export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
               export TYPEORM_MIGRATIONS=./migrations/*.ts
               cd .circleci/ansible
               cat inventory.txt
               ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      
      - run:
          name: Get backend url and backend smoke test
          command: |
              BACKEND_IP=$(aws ec2 describe-instances \
                 --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                 --query 'Reservations[*].Instances[*].PublicIpAddress' \
                 --output text)
              # Fetch and prepare the BACKEND_IP env var
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
              if curl -s "http://${API_URL}/api/status" | grep "error"
              then
                 return 1
              else
                 return 0
              fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com/#/employees"
            echo "${URL}"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      
      - run:
          name: Update cloudfront distribution
          command: |
           aws cloudformation deploy \
           --template-file .circleci/files/cloudfront.yml \
           --stack-name InitialStack \
           --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
           --tags project=udapeople
         
        
  cleanup :
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[*][Value]" --no-paginate --output text)
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            echo OLDWORKflowID : "${OldWorkflowID[@]}"
            # Delete old stacks
            chmod +x .circleci/files/cleanStacks.sh
            for i in "${OldWorkflowID[@]}"
            do
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID[@]}" ]]
            then
                ./.circleci/files/cleanStacks.sh "${OldWorkflowID[@]}"
            fi
            done
      

         
workflows:
  my_workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
     

